#!/usr/bin/env perl
use strict;
use warnings;
use Homolog::Schema;
use Bio::SeqIO;
use Getopt::Long;
use Pod::Usage;

my ($opt_help, $opt_man, $opt_password, $opt_trans, $opt_dna, $opt_analysis_id);
GetOptions(
  'help|h'          => \$opt_help,
  'password|p=s'    => \$opt_password,
  'translation|t=s' => \$opt_trans,
  'dna|d=s'         => \$opt_dna,
  'analysis_id|a=i' => \$opt_analysis_id,
) or pod2usage(-verbose => 1) && exit;

pod2usage(-verbose => 1) && exit if defined $opt_help;
pod2usage(-verbose => 1) && exit unless 
                           (
                                 defined $opt_password
                               and 
                                 defined $opt_analysis_id
                           );

my $SCHEMA = Homolog::Schema->connect('dbi:mysql:pathogen_fy2_test:mcs6:3346', 'fy2', $opt_password);

#we have a prodigal extraction with nucleotide and protein fasta files:
if (defined $opt_trans and defined $opt_dna) {
    insert_translation_and_dna();
} 
#just a fasta file:
elsif (defined $opt_dna) {
    insert_dna();
} 
elsif (defined $opt_trans) {
    insert_translation();
}
else {  die 'You should at least provide a translation or DNA fasta file'; }


sub insert_dna {
    
    my $io = Bio::SeqIO->new(-file => $opt_dna);
    my $isolate_name = _get_isolate_name($opt_dna);
    my $isolate_id   = _get_isolate_id_by_name($isolate_name);

    while (my $seq = $io->next_seq) {
            #start inserting into the DB:
           my $inserted_feature = $SCHEMA->resultset('HomFeature')->create({
                                                 isolate_id  => $isolate_id,
                                                 analysis_id => $opt_analysis_id,
                                                 product     => $seq->id . $seq->desc,
                                               });

            $SCHEMA->resultset('HomFeatureContent')->create( {
                                                     dna         => $seq->seq,
                                                     feature_id  => $inserted_feature->id,
                                                   });
            
            print 'Inserted: ', $inserted_feature->id, "\n";       
    }
}

sub insert_translation {
    
    my $io = Bio::SeqIO->new(-file => $opt_dna);
    my $isolate_name = _get_isolate_name($opt_dna);
    my $isolate_id   = _get_isolate_id_by_name($isolate_name);

    while (my $seq = $io->next_seq) {
            #start inserting into the DB:
           my $inserted_feature = $SCHEMA->resultset('HomFeature')->create({
                                                 isolate_id  => $isolate_id,
                                                 analysis_id => $opt_analysis_id,
                                                 product     => $seq->id . $seq->desc,
                                               });

            $SCHEMA->resultset('HomFeatureContent')->create( {
                                                     translation => $seq->seq,
                                                     feature_id  => $inserted_feature->id,
                                                   });
            
            print 'Inserted: ', $inserted_feature->id, "\n";       
    }
}


sub insert_translation_and_dna {
    
    my $iodna = Bio::SeqIO->new(-file => $opt_dna);
    my $iotrans = Bio::SeqIO->new(-file => $opt_trans);
    
    my $isolate_name = _get_isolate_name($opt_dna);
    my $isolate_id   = _get_isolate_id_by_name($isolate_name);

    #we assume these files were generated by prodigal
    while (my $seqdna = $iodna->next_seq) {
            my $seqtrans = $iotrans->next_seq;
            #start inserting into the DB:
            my $inserted_feature = $SCHEMA->resultset('HomFeature')->create({
                                                 isolate_id  => $isolate_id,
                                                 analysis_id => $opt_analysis_id,
                                               });

            my $description =   $opt_dna   . ', ' . $seqdna->id . $seqdna->desc . ', '
                              . $opt_trans . ', ' . $seqtrans->id . $seqtrans->desc;
            
            $SCHEMA->resultset('HomFeatureContent')->create( {
                                        dna         => $seqdna->seq,
                                        translation => $seqtrans->seq,
                                        description => $description, 
                                        feature_id  => $inserted_feature->id,
                                        });

            print 'Inserted: ', $inserted_feature->id, "\n";       
    }
}
#inserts embl features into the hom_features table



sub _get_isolate_name {
    my $file_name = shift;
    
     #remove any any preceeding paths or trailing extensions 
    #from file name args:
    my ($name) = $file_name =~ /(?:.*\/)*([^.]+)/;
    
    return $name if $name;
    
    die 'Couldnt parse the name from: ' . $file_name;
}

sub _get_isolate_id_by_name {
    my $name = shift;
    
    my $isolate_id; 
    #well this will fail if the ID is not there...
    eval {
        $isolate_id = $SCHEMA->resultset('HomIsolates')->search({ sanger_id => $name })->first->id;
    }; 
    if ($@) {
        die "Looks like isolate with name $name is not in our DB, dying!";
    }
   
    return $isolate_id;
}

__END__

=head1 NAME

=head1 SYNOPSIS

B<hom_fasta_2_db.pl> -p password  -translation -dna ...
   
 Options:
   -help|h        brief help message
   -dbpassword|p=s' => \$opt_password,
   -translation|t=s' => \$opt_trans, FASTA format
   -dna|d=s'         => \$opt_dna  FASTA format
   -analysis_id|a=i' => \$opt_analysis_id,

=head1 DESCRIPTION

Insert features from an FASTA file into DB

=head1 OPTIONS

=over 8

=item B<-help>

Print a brief help message and exit.

=back

=head1 VERSION

Version 0.01

=cut

